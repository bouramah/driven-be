"""fix_relationships_and_add_missing_columns

Revision ID: a302f577ae72
Revises: 18c38a926219
Create Date: 2025-02-28 12:29:08.378130

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a302f577ae72'
down_revision = '18c38a926219'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Vérifier si la colonne app_id existe déjà dans la table role
    # Si elle n'existe pas, l'ajouter comme nullable
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('role')]
    
    if 'app_id' not in columns:
        with op.batch_alter_table('role', schema=None) as batch_op:
            batch_op.add_column(sa.Column('app_id', sa.Integer(), nullable=True))
    
    # Mettre à jour les enregistrements existants dans la table role
    # Nous utilisons l'app_id 1 comme valeur par défaut
    op.execute("""
        UPDATE role 
        SET app_id = 1
        WHERE app_id IS NULL
    """)
    
    # Maintenant, rendre la colonne non nullable et ajouter la contrainte de clé étrangère
    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.alter_column('app_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.create_foreign_key('fk_role_app_id', 'application', ['app_id'], ['app_id'])

    # Pour utilisateur_role, nous devons d'abord ajouter la colonne comme nullable
    with op.batch_alter_table('utilisateur_role', schema=None) as batch_op:
        batch_op.add_column(sa.Column('app_id', sa.Integer(), nullable=True))
    
    # Mettre à jour les enregistrements existants en utilisant l'app_id du rôle associé
    op.execute("""
        UPDATE utilisateur_role 
        SET app_id = (SELECT app_id FROM role WHERE role.role_id = utilisateur_role.role_id)
        WHERE app_id IS NULL
    """)
    
    # Maintenant, rendre la colonne non nullable et ajouter la contrainte de clé étrangère
    with op.batch_alter_table('utilisateur_role', schema=None) as batch_op:
        batch_op.alter_column('app_id', existing_type=sa.INTEGER(), nullable=False)
        batch_op.create_foreign_key('fk_utilisateur_role_app_id', 'application', ['app_id'], ['app_id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('utilisateur_role', schema=None) as batch_op:
        batch_op.drop_constraint('fk_utilisateur_role_app_id', type_='foreignkey')
        batch_op.drop_column('app_id')

    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.drop_constraint('fk_role_app_id', type_='foreignkey')
        batch_op.alter_column('app_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    # ### end Alembic commands ###
