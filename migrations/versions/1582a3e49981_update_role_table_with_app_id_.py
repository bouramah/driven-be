"""update_role_table_with_app_id_constraints

Revision ID: 1582a3e49981
Revises: 53fd0b5d92fb
Create Date: 2025-02-27 17:38:05.382485

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import table, column, Integer, inspect


# revision identifiers, used by Alembic.
revision = '1582a3e49981'
down_revision = '53fd0b5d92fb'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Créer la table utilisateur_role si elle n'existe pas déjà
    if not op.get_bind().dialect.has_table(op.get_bind(), 'utilisateur_role'):
        op.create_table('utilisateur_role',
            sa.Column('ur_id', sa.Integer(), nullable=False),
            sa.Column('id_utilisateur', sa.Integer(), nullable=False),
            sa.Column('role_id', sa.Integer(), nullable=False),
            sa.Column('app_id', sa.Integer(), nullable=False),
            sa.Column('creer_par', sa.Integer(), nullable=False),
            sa.Column('modifier_par', sa.Integer(), nullable=False),
            sa.Column('creer_a', sa.DateTime(), nullable=False),
            sa.Column('modifier_a', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['app_id'], ['application.app_id'], name='fk_utilisateur_role_app_id'),
            sa.ForeignKeyConstraint(['id_utilisateur'], ['utilisateur.id_utilisateur'], name='fk_utilisateur_role_utilisateur_id'),
            sa.ForeignKeyConstraint(['role_id'], ['role.role_id'], name='fk_utilisateur_role_role_id'),
            sa.PrimaryKeyConstraint('ur_id')
        )

    # Étape 1: Ajouter app_id comme nullable
    conn = op.get_bind()
    inspector = inspect(conn)
    has_app_id = False
    for column in inspector.get_columns('role'):
        if column['name'] == 'app_id':
            has_app_id = True
            break

    if not has_app_id:
        with op.batch_alter_table('role', schema=None) as batch_op:
            batch_op.add_column(sa.Column('app_id', sa.Integer(), nullable=True))

        # Étape 2: Mettre à jour les données existantes
        role_table = table('role',
            column('app_id', Integer)
        )
        op.execute(
            role_table.update().values(app_id=1)
        )

        # Étape 3: Rendre app_id non nullable et ajouter la contrainte de clé étrangère
        with op.batch_alter_table('role', schema=None) as batch_op:
            batch_op.alter_column('app_id',
                existing_type=sa.Integer(),
                nullable=False
            )
            batch_op.create_foreign_key('fk_role_app_id', 'application', ['app_id'], ['app_id'])

    # Supprimer la colonne role_id de la table utilisateur
    with op.batch_alter_table('utilisateur', schema=None) as batch_op:
        batch_op.drop_column('role_id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('utilisateur', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role_id', sa.INTEGER(), nullable=False))
        batch_op.create_foreign_key('fk_utilisateur_role_id', 'role', ['role_id'], ['role_id'])

    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.drop_constraint('fk_role_app_id', type_='foreignkey')
        batch_op.drop_column('app_id')

    op.drop_table('utilisateur_role')
    # ### end Alembic commands ###
